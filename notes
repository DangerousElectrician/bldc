R1 is a 10k NTC thermistor
	one batch has 1k thermistors instead
	firmware has been patched to deal with this
	use:
		make ONE_K_THERM=1

flashing firmware via bldc tool keeps the vesc operating while the firmware is being uploaded. The vesc only goes down when it reboots into the new firmware

modifications:
	R401 is the CAN terminator, remove
	disable hall effect low pass filter when using with encoder
		remove C5,6,7 R11,12,13 
		bridge R10,9,8
		don't touch R7 and C4
			these are for the motor temperature

0.52 ohms between two leads
326.428 uH between two leads

bldc mode: 70 integrator, 50 bemf coupling

needed features
	command motor setpoint
	closed loop output
		position, velocity, and force selectable
	telemetry
		motor current
		motor voltage
		current throttle
		sensor feedback

wanted features
	motor temp
	controller temp
	configurabiltity

all the mosfet temperatures is actually the PCB temperature, there is only one temperature sensor on the board

http://vedder.se/2015/08/vesc-writing-custom-applications/
	mcpwm.h conatins all the stuff that can be read from the motor
	actually use mc_interface.h, it is newer
comm_can.h contains a function to send bytes over can bus
how to receive bytes over can bus?
	a separate thread on the vesc watches the can bus and puts the bytes in a buffer to be processed by another thread

extended id is used

comm_can.c and commands.c have the code for interpreting serial commands and CAN commands
http://www.lp-electronic.com/vesc/control-vesc-via-can-bus-from-external-systems/

http://vedder.se/2015/10/communicating-with-the-vesc-using-uart/
	bldc_interface_uart.c needs to be adapted to work with CAN

https://github.com/e-overton/bldc-can
	will not work because it does not support setting position

CAN_PACKET_FILL_RX_BUFFER adds bytes to the rx buffer for normal serial commands
CAN_PACKET_FILL_RX_BUFFER_LONG adds bytes to rx buffer when the index is more than a byte

can id is used to control what feedback mode the controller is operating in

the can bus code seems to use as little of the advanced features of the can controller
	the can bus code is very similar to the usb uart code
	advanced features (filtering, buffering, etc) are probably not used because the code is so similar to usb uart
		reducing reliance on advanced hardware means more limited chips can be used
		laziness

add another CAN_PACKET_ID enum for custom setpoint
	for running custom control loops
		custom control loop should use something that does not pass through existing control loops
		control the current with mc_interface_set_current

There is some sort of integral windup mitigation
	unsure of effectiveness, it seems hardcoded, look at this more

m_id_set and m_iq_set controls the motor current
	eventually, it goes through a bunch of other variables and calculations first
	iq and id are from park transformation
	iq is torque
	id is flux
		for pmsm this is supplied by the permanent magnets in the motor so this is zero
		vesc has m_id_set at zero for all normal operating modes
		id is not zero when the vesc is running an encoder or hall sensor detection or running open loop

https://www.youtube.com/watch?v=cdiZUszYLiA
	Field Oriented Control of Permanent Magnet Motors


the tachometer data vesc refers to is not speed of motor, it is similar to the talon srx sensor data
Velocity control possible
Force control possible
Position control?
	Might be limited in range of motion
	have to test
	can go from 0 degrees to 360 degrees
	can turn continuously, but will have to manually command motor through angles
	http://vedder.se/forums/viewtopic.php?f=8&t=440

release motor just sets the motor current to zero
mc_interface_lock disables motor control commands, mc_interface_unlock enables them again
	this disables motor control commands, it does not seem to stop the motor

Talon srx structs
/* encoder/decoders */
/** control */
typedef struct _TALON_Control_1_General_10ms_t {
	unsigned TokenH:8;
	unsigned TokenL:8;
	unsigned DemandH:8;
	unsigned DemandM:8;
	unsigned DemandL:8;
	unsigned ProfileSlotSelect:1;
	unsigned FeedbackDeviceSelect:4;
	unsigned OverrideLimitSwitchEn:3;
	unsigned RevFeedbackSensor:1;
	unsigned RevMotDuringCloseLoopEn:1;
	unsigned OverrideBrakeType:2;
	unsigned ModeSelect:4;
	unsigned RampThrottle:8;
} TALON_Control_1_General_10ms_t ;
typedef struct _TALON_Control_2_Rates_OneShot_t {
	unsigned Status1Ms:8;
	unsigned Status2Ms:8;
	unsigned Status3Ms:8;
	unsigned Status4Ms:8;
	unsigned StatusPulWidMs:8;	// TALON_Status_8_PulseWid_100ms_t
} TALON_Control_2_Rates_OneShot_t ;
typedef struct _TALON_Control_3_ClearFlags_OneShot_t {
	unsigned ZeroFeedbackSensor:1;
	unsigned ClearStickyFaults:1;
} TALON_Control_3_ClearFlags_OneShot_t ;

/** status */
typedef struct _TALON_Status_1_General_10ms_t {
	unsigned CloseLoopErrH:8;
	unsigned CloseLoopErrM:8;
	unsigned CloseLoopErrL:8;
	unsigned AppliedThrottle_h3:3;
	unsigned Fault_RevSoftLim:1;
	unsigned Fault_ForSoftLim:1;
	unsigned TokLocked:1;
	unsigned LimitSwitchClosedRev:1;
	unsigned LimitSwitchClosedFor:1;
	unsigned AppliedThrottle_l8:8;
	unsigned ModeSelect_h1:1;
	unsigned FeedbackDeviceSelect:4;
	unsigned LimitSwitchEn:3;
	unsigned Fault_HardwareFailure:1;
	unsigned Fault_RevLim:1;
	unsigned Fault_ForLim:1;
	unsigned Fault_UnderVoltage:1;
	unsigned Fault_OverTemp:1;
	unsigned ModeSelect_b3:3;
	unsigned TokenSeed:8;
} TALON_Status_1_General_10ms_t ;
typedef struct _TALON_Status_2_Feedback_20ms_t {
	unsigned SensorPositionH:8;
	unsigned SensorPositionM:8;
	unsigned SensorPositionL:8;
	unsigned SensorVelocityH:8;
	unsigned SensorVelocityL:8;
	unsigned Current_h8:8;
	unsigned StckyFault_RevSoftLim:1;
	unsigned StckyFault_ForSoftLim:1;
	unsigned StckyFault_RevLim:1;
	unsigned StckyFault_ForLim:1;
	unsigned StckyFault_UnderVoltage:1;
	unsigned StckyFault_OverTemp:1;
	unsigned Current_l2:2;
	unsigned reserved2:4;
	unsigned VelDiv4:1;
	unsigned PosDiv8:1;
	unsigned ProfileSlotSelect:1;
	unsigned BrakeIsEnabled:1;
} TALON_Status_2_Feedback_20ms_t ;
typedef struct _TALON_Status_3_Enc_100ms_t {
	unsigned EncPositionH:8;
	unsigned EncPositionM:8;
	unsigned EncPositionL:8;
	unsigned EncVelH:8;
	unsigned EncVelL:8;
	unsigned EncIndexRiseEventsH:8;
	unsigned EncIndexRiseEventsL:8;
	unsigned reserved:3;
	unsigned VelDiv4:1;
	unsigned PosDiv8:1;
	unsigned QuadIdxpin:1;
	unsigned QuadBpin:1;
	unsigned QuadApin:1;
} TALON_Status_3_Enc_100ms_t ;
typedef struct _TALON_Status_4_AinTempVbat_100ms_t {
	unsigned AnalogInWithOvH:8;
	unsigned AnalogInWithOvM:8;
	unsigned AnalogInWithOvL:8;
	unsigned AnalogInVelH:8;
	unsigned AnalogInVelL:8;
	unsigned Temp:8;
	unsigned BatteryV:8;
	unsigned reserved:6;
	unsigned VelDiv4:1;
	unsigned PosDiv8:1;
} TALON_Status_4_AinTempVbat_100ms_t ;
typedef struct _TALON_Status_5_Startup_OneShot_t {
	unsigned ResetCountH:8;
	unsigned ResetCountL:8;
	unsigned ResetFlagsH:8;
	unsigned ResetFlagsL:8;
	unsigned FirmVersH:8;
	unsigned FirmVersL:8;
} TALON_Status_5_Startup_OneShot_t ;
typedef struct _TALON_Status_6_Eol_t {
	unsigned currentAdcUncal_h2:2;
	unsigned reserved1:5;
	unsigned SpiCsPin_GadgeteerPin6:1;
	unsigned currentAdcUncal_l8:8;
	unsigned tempAdcUncal_h2:2;
	unsigned reserved2:6;
	unsigned tempAdcUncal_l8:8;
	unsigned vbatAdcUncal_h2:2;
	unsigned reserved3:6;
	unsigned vbatAdcUncal_l8:8;
	unsigned analogAdcUncal_h2:2;
	unsigned reserved4:6;
	unsigned analogAdcUncal_l8:8;
} TALON_Status_6_Eol_t ;
typedef struct _TALON_Status_7_Debug_200ms_t {
	unsigned TokenizationFails_h8:8;
	unsigned TokenizationFails_l8:8;
	unsigned LastFailedToken_h8:8;
	unsigned LastFailedToken_l8:8;
	unsigned TokenizationSucceses_h8:8;
	unsigned TokenizationSucceses_l8:8;
} TALON_Status_7_Debug_200ms_t ;
typedef struct _TALON_Status_8_PulseWid_100ms_t {
	unsigned PulseWidPositionH:8;
	unsigned PulseWidPositionM:8;
	unsigned PulseWidPositionL:8;
	unsigned reserved:6;
	unsigned VelDiv4:1;
	unsigned PosDiv8:1;
	unsigned PeriodUsM8:8;
	unsigned PeriodUsL8:8;
	unsigned PulseWidVelH:8;
	unsigned PulseWidVelL:8;
} TALON_Status_8_PulseWid_100ms_t ;
typedef struct _TALON_Param_Request_t {
	unsigned ParamEnum:8;
} TALON_Param_Request_t ;
typedef struct _TALON_Param_Response_t {
	unsigned ParamEnum:8;
	unsigned ParamValueL:8;
	unsigned ParamValueML:8;
	unsigned ParamValueMH:8;
	unsigned ParamValueH:8;
} TALON_Param_Response_t ;
